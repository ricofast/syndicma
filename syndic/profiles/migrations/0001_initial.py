# Generated by Django 3.0.5 on 2021-01-28 15:51

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import opencourse.profiles.formatChecker
import opencourse.profiles.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('passchanged', models.NullBooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': (('access_professor_pages', 'Access professor pages'), ('access_student_pages', 'Access student pages'), ('access_regadmin_pages', 'Access regular admin pages'), ('access_superadmin_pages', 'Access super admin pages'), ('access_parent_pages', 'Access parent pages')),
                'abstract': False,
            },
            bases=(guardian.mixins.GuardianUserMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture')),
                ('picture1', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture1')),
                ('picture2', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture2')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=60, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('edulevel', models.CharField(blank=True, max_length=255, null=True)),
                ('tel', models.CharField(max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.CharField(blank=True, max_length=60, null=True)),
                ('dateadd', models.DateField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 262437), null=True)),
                ('contacts_requests', models.PositiveIntegerField(default=0)),
                ('parentallink', models.CharField(blank=True, max_length=20, null=True)),
                ('active', models.NullBooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Parent',
                'verbose_name_plural': 'Parents',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture')),
                ('picture1', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture1')),
                ('picture2', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture2')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=60, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('edulevel', models.CharField(blank=True, max_length=255, null=True)),
                ('tel', models.CharField(max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.CharField(blank=True, max_length=60, null=True)),
                ('dateadd', models.DateField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 262437), null=True)),
                ('contacts_requests', models.PositiveIntegerField(default=0)),
                ('code', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('bio', models.TextField(blank=True, max_length=1000, null=True)),
                ('experience', models.TextField(blank=True, max_length=1000, null=True)),
                ('yearsexperience', models.SmallIntegerField(blank=True, null=True)),
                ('act_position', models.CharField(blank=True, max_length=100, null=True)),
                ('dateexpir', models.DateTimeField(blank=True, null=True)),
                ('active', models.NullBooleanField(default=False)),
                ('feespaid', models.NullBooleanField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professors',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Superadmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture')),
                ('picture1', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture1')),
                ('picture2', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture2')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=60, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('edulevel', models.CharField(blank=True, max_length=255, null=True)),
                ('tel', models.CharField(max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.CharField(blank=True, max_length=60, null=True)),
                ('dateadd', models.DateField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 262437), null=True)),
                ('contacts_requests', models.PositiveIntegerField(default=0)),
                ('bio', models.TextField(blank=True, max_length=1000, null=True)),
                ('yearsexperience', models.SmallIntegerField(blank=True, null=True)),
                ('act_position', models.CharField(blank=True, max_length=100, null=True)),
                ('dateexpir', models.DateTimeField(blank=True, null=True)),
                ('active', models.NullBooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Superadmin',
                'verbose_name_plural': 'Superadmins',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture')),
                ('picture1', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture1')),
                ('picture2', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture2')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=60, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('edulevel', models.CharField(blank=True, max_length=255, null=True)),
                ('tel', models.CharField(max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.CharField(blank=True, max_length=60, null=True)),
                ('dateadd', models.DateField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 262437), null=True)),
                ('contacts_requests', models.PositiveIntegerField(default=0)),
                ('code', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='profiles.Parent')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField()),
                ('text', models.TextField()),
                ('coursename', models.CharField(max_length=100)),
                ('reviewdate', models.DateTimeField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 266668), null=True)),
                ('author_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Professor')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='Regadmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture')),
                ('picture1', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture1')),
                ('picture2', opencourse.profiles.formatChecker.ContentTypeRestrictedFileField(blank=True, null=True, upload_to=opencourse.profiles.models.user_directory_path, verbose_name='Profile picture2')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email verified')),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=60, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('edulevel', models.CharField(blank=True, max_length=255, null=True)),
                ('tel', models.CharField(max_length=20)),
                ('whatsapp', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.CharField(blank=True, max_length=60, null=True)),
                ('dateadd', models.DateField(blank=True, default=datetime.datetime(2021, 1, 28, 15, 51, 19, 262437), null=True)),
                ('contacts_requests', models.PositiveIntegerField(default=0)),
                ('bio', models.TextField(blank=True, max_length=1000, null=True)),
                ('yearsexperience', models.SmallIntegerField(blank=True, null=True)),
                ('act_position', models.CharField(blank=True, max_length=100, null=True)),
                ('dateexpir', models.DateTimeField(blank=True, null=True)),
                ('active', models.NullBooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Regadmin',
                'verbose_name_plural': 'Regadmins',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LoggedInUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=32, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='logged_in_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
